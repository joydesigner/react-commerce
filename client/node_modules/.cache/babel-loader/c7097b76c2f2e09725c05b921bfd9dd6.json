{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/xzheng013/Documents/experiments/react-comm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"/Users/xzheng013/Documents/experiments/react-comm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/xzheng013/Documents/experiments/react-comm/client/src/graphql/resolvers.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   itemCount @client\\n }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   cartItems @client\\n }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   cartHidden @client\\n }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  extend type Item {\\n    quantity: Int\\n  }\\n\\n  extend type Mutation {\\n    ToggleCartHidden: Boolean!\\n    AddItemToCart(item: Item!): [Item]!\\n    RemoveItemFromCart(item: Item!): [Item]!,\\n    ClearItemFromCart(item: Item!): [Item]!\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight } from 'lodash';\nimport { gql } from 'apollo-boost';\nimport { addItemToCart, removeItemFromCart, calculateItemsCount, clearItemFromCart } from './cart.utils';\nexport const Graphql = mutationProps => {\n  const mutations = mutationProps.mutations,\n        queries = mutationProps.queries,\n        render = mutationProps.render;\n  const composedMutationFuncs = flowRight(...Object.keys(mutations).map(v => {\n    const _mutations$v = mutations[v],\n          mutation = _mutations$v.mutation,\n          options = _mutations$v.options;\n    return graphql(mutation, {\n      name: v,\n      alias: v,\n      options\n    });\n  }));\n  const composedQueryFuncs = flowRight(...Object.keys(queries).map(v => {\n    const _queries$v = queries[v],\n          query = _queries$v.query,\n          options = _queries$v.options;\n    return graphql(query, {\n      name: v,\n      alias: v,\n      options\n    });\n  }));\n  const SubCompInstance = flowRight(composedQueryFuncs, composedMutationFuncs)(subCompProps => {\n    const mutates = subCompProps.mutationNames.reduce((memo, mutationName) => _objectSpread({}, memo, {\n      [mutationName]: subCompProps[mutationName]\n    }), {});\n    const data = subCompProps.queryNames.reduce((memo, queryName) => _objectSpread({}, memo, {\n      [queryName]: subCompProps[queryName]\n    }), {});\n    const loading = subCompProps.queryNames.reduce((memo, queryName) => memo || subCompProps[queryName].loading, false);\n    return subCompProps.render(mutates, data, {\n      loading\n    });\n  });\n  return React.createElement(SubCompInstance, {\n    render: render,\n    mutationNames: Object.keys(mutations),\n    queryNames: Object.keys(queries),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n};\nexport const typeDefs = gql(_templateObject());\nconst GET_CART_HIDDEN = gql(_templateObject2());\nconst GET_CART_ITEMS = gql(_templateObject3());\nconst GET_ITEM_COUNT = gql(_templateObject4());\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, {\n      cache\n    }) => {\n      const _cache$readQuery = cache.readQuery({\n        query: GET_CART_HIDDEN\n      }),\n            cartHidden = _cache$readQuery.cartHidden;\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: {\n          cartHidden: !cartHidden\n        }\n      });\n      return !cartHidden;\n    },\n    addItemToCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery2 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery2.cartItems;\n\n      const newCartItems = addItemToCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    },\n    removeItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery3 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery3.cartItems;\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    },\n    clearItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery4 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery4.cartItems;\n\n      const newCartItems = clearItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/xzheng013/Documents/experiments/react-comm/client/src/graphql/resolvers.js"],"names":["React","graphql","flowRight","gql","addItemToCart","removeItemFromCart","calculateItemsCount","clearItemFromCart","Graphql","mutationProps","mutations","queries","render","composedMutationFuncs","Object","keys","map","v","mutation","options","name","alias","composedQueryFuncs","query","SubCompInstance","subCompProps","mutates","mutationNames","reduce","memo","mutationName","data","queryNames","queryName","loading","typeDefs","GET_CART_HIDDEN","GET_CART_ITEMS","GET_ITEM_COUNT","resolvers","Mutation","toggleCartHidden","_root","_args","cache","readQuery","cartHidden","writeQuery","item","cartItems","newCartItems","itemCount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { graphql } from 'react-apollo';\nimport { flowRight } from 'lodash';\nimport { gql } from 'apollo-boost';\nimport { addItemToCart, removeItemFromCart, calculateItemsCount, clearItemFromCart } from './cart.utils';\n\nexport const Graphql = (mutationProps) => {\n  const { mutations, queries, render } = mutationProps;\n\n  const composedMutationFuncs = flowRight(...Object.keys(mutations).map(v => {\n    const { mutation, options } = mutations[v];\n    return graphql(mutation, {\n      name: v,\n      alias: v,\n      options,\n    });\n  }));\n\n  const composedQueryFuncs = flowRight(...Object.keys(queries).map(v => {\n    const { query, options } = queries[v];\n    return graphql(query, {\n      name: v,\n      alias: v,\n      options,\n    });\n  }));\n\n  const SubCompInstance = flowRight(composedQueryFuncs, composedMutationFuncs)(subCompProps => {\n    const mutates = subCompProps.mutationNames.reduce((memo, mutationName) => ({\n      ...memo,\n      [mutationName]: subCompProps[mutationName],\n    }), {});\n\n    const data = subCompProps.queryNames.reduce((memo, queryName) => ({\n      ...memo,\n      [queryName]: subCompProps[queryName],\n    }), {});\n\n    const loading = subCompProps.queryNames.reduce((memo, queryName) => memo || subCompProps[queryName].loading, false);\n\n    return subCompProps.render(mutates, data, { loading });\n  });\n\n  return <SubCompInstance render={render} mutationNames={Object.keys(mutations)} queryNames={Object.keys(queries)} />;\n}\n\n\nexport const typeDefs = gql`\n  extend type Item {\n    quantity: Int\n  }\n\n  extend type Mutation {\n    ToggleCartHidden: Boolean!\n    AddItemToCart(item: Item!): [Item]!\n    RemoveItemFromCart(item: Item!): [Item]!,\n    ClearItemFromCart(item: Item!): [Item]!\n  }\n`;\n\nconst GET_CART_HIDDEN = gql`\n {\n   cartHidden @client\n }\n`;\n\nconst GET_CART_ITEMS = gql`\n {\n   cartItems @client\n }\n`;\n\nconst GET_ITEM_COUNT = gql`\n {\n   itemCount @client\n }\n`;\n\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, { cache }) => {\n      const { cartHidden } = cache.readQuery({\n        query: GET_CART_HIDDEN,\n      });\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: { cartHidden: !cartHidden }\n      });\n\n      return !cartHidden;\n    },\n\n    addItemToCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = addItemToCart(cartItems, item);\n\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n    },\n\n    removeItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n    },\n\n    clearItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n      const newCartItems = clearItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}