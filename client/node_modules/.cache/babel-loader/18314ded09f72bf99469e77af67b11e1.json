{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/xzheng013/Documents/experiments/react-comm/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   itemCount @client\\n }\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   cartItems @client\\n }\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n {\\n   cartHidden @client\\n }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  extend type Item {\\n    quantity: Int\\n  }\\n\\n  extend type Mutation {\\n    ToggleCartHidden: Boolean!\\n    AddItemToCart(item: Item!): [Item]!\\n    RemoveItemFromCart(item: Item!): [Item]!,\\n    ClearItemFromCart(item: Item!): [Item]!\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { gql } from 'apollo-boost';\nimport { addItemToCart, removeItemFromCart, calculateItemsCount, clearItemFromCart } from './cart.utils';\nexport const typeDefs = gql(_templateObject());\nconst GET_CART_HIDDEN = gql(_templateObject2());\nconst GET_CART_ITEMS = gql(_templateObject3());\nconst GET_ITEM_COUNT = gql(_templateObject4());\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, {\n      cache\n    }) => {\n      const _cache$readQuery = cache.readQuery({\n        query: GET_CART_HIDDEN\n      }),\n            cartHidden = _cache$readQuery.cartHidden;\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: {\n          cartHidden: !cartHidden\n        }\n      });\n      return !cartHidden;\n    },\n    addItemToCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery2 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery2.cartItems;\n\n      const newCartItems = addItemToCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    },\n    removeItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery3 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery3.cartItems;\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    },\n    clearItemFromCart: (_root, {\n      item\n    }, {\n      cache\n    }) => {\n      const _cache$readQuery4 = cache.readQuery({\n        query: GET_CART_ITEMS\n      }),\n            cartItems = _cache$readQuery4.cartItems;\n\n      const newCartItems = clearItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: {\n          itemCount: calculateItemsCount(newCartItems)\n        }\n      });\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: {\n          cartItems: newCartItems\n        }\n      });\n      return newCartItems;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/xzheng013/Documents/experiments/react-comm/client/src/graphql/resolvers.js"],"names":["React","gql","addItemToCart","removeItemFromCart","calculateItemsCount","clearItemFromCart","typeDefs","GET_CART_HIDDEN","GET_CART_ITEMS","GET_ITEM_COUNT","resolvers","Mutation","toggleCartHidden","_root","_args","cache","readQuery","query","cartHidden","writeQuery","data","item","cartItems","newCartItems","itemCount"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { gql } from 'apollo-boost';\nimport { addItemToCart, removeItemFromCart, calculateItemsCount, clearItemFromCart } from './cart.utils';\n\n\n\nexport const typeDefs = gql`\n  extend type Item {\n    quantity: Int\n  }\n\n  extend type Mutation {\n    ToggleCartHidden: Boolean!\n    AddItemToCart(item: Item!): [Item]!\n    RemoveItemFromCart(item: Item!): [Item]!,\n    ClearItemFromCart(item: Item!): [Item]!\n  }\n`;\n\nconst GET_CART_HIDDEN = gql`\n {\n   cartHidden @client\n }\n`;\n\nconst GET_CART_ITEMS = gql`\n {\n   cartItems @client\n }\n`;\n\nconst GET_ITEM_COUNT = gql`\n {\n   itemCount @client\n }\n`;\n\nexport const resolvers = {\n  Mutation: {\n    toggleCartHidden: (_root, _args, { cache }) => {\n      const { cartHidden } = cache.readQuery({\n        query: GET_CART_HIDDEN,\n      });\n\n      cache.writeQuery({\n        query: GET_CART_HIDDEN,\n        data: { cartHidden: !cartHidden }\n      });\n\n      return !cartHidden;\n    },\n\n    addItemToCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = addItemToCart(cartItems, item);\n\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n    },\n\n    removeItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n\n      const newCartItems = removeItemFromCart(cartItems, item);\n\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n    },\n\n    clearItemFromCart: (_root, { item }, { cache }) => {\n      const { cartItems } = cache.readQuery({\n        query: GET_CART_ITEMS\n      });\n      const newCartItems = clearItemFromCart(cartItems, item);\n      cache.writeQuery({\n        query: GET_ITEM_COUNT,\n        data: { itemCount: calculateItemsCount(newCartItems) }\n      });\n\n      cache.writeQuery({\n        query: GET_CART_ITEMS,\n        data: { cartItems: newCartItems }\n      });\n\n      return newCartItems;\n\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}